// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: messages.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Protowire_KaspadRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt64 = 0

  var payload: Protowire_KaspadRequest.OneOf_Payload? = nil

  var getCurrentNetworkRequest: Protowire_GetCurrentNetworkRequestMessage {
    get {
      if case .getCurrentNetworkRequest(let v)? = payload {return v}
      return Protowire_GetCurrentNetworkRequestMessage()
    }
    set {payload = .getCurrentNetworkRequest(newValue)}
  }

  var submitBlockRequest: Protowire_SubmitBlockRequestMessage {
    get {
      if case .submitBlockRequest(let v)? = payload {return v}
      return Protowire_SubmitBlockRequestMessage()
    }
    set {payload = .submitBlockRequest(newValue)}
  }

  var getBlockTemplateRequest: Protowire_GetBlockTemplateRequestMessage {
    get {
      if case .getBlockTemplateRequest(let v)? = payload {return v}
      return Protowire_GetBlockTemplateRequestMessage()
    }
    set {payload = .getBlockTemplateRequest(newValue)}
  }

  var notifyBlockAddedRequest: Protowire_NotifyBlockAddedRequestMessage {
    get {
      if case .notifyBlockAddedRequest(let v)? = payload {return v}
      return Protowire_NotifyBlockAddedRequestMessage()
    }
    set {payload = .notifyBlockAddedRequest(newValue)}
  }

  /// BlockAddedNotificationMessage blockAddedNotification = 1009;
  var getPeerAddressesRequest: Protowire_GetPeerAddressesRequestMessage {
    get {
      if case .getPeerAddressesRequest(let v)? = payload {return v}
      return Protowire_GetPeerAddressesRequestMessage()
    }
    set {payload = .getPeerAddressesRequest(newValue)}
  }

  var getSinkRequest: Protowire_GetSinkRequestMessage {
    get {
      if case .getSinkRequest(let v)? = payload {return v}
      return Protowire_GetSinkRequestMessage()
    }
    set {payload = .getSinkRequest(newValue)}
  }

  var getMempoolEntryRequest: Protowire_GetMempoolEntryRequestMessage {
    get {
      if case .getMempoolEntryRequest(let v)? = payload {return v}
      return Protowire_GetMempoolEntryRequestMessage()
    }
    set {payload = .getMempoolEntryRequest(newValue)}
  }

  var getConnectedPeerInfoRequest: Protowire_GetConnectedPeerInfoRequestMessage {
    get {
      if case .getConnectedPeerInfoRequest(let v)? = payload {return v}
      return Protowire_GetConnectedPeerInfoRequestMessage()
    }
    set {payload = .getConnectedPeerInfoRequest(newValue)}
  }

  var addPeerRequest: Protowire_AddPeerRequestMessage {
    get {
      if case .addPeerRequest(let v)? = payload {return v}
      return Protowire_AddPeerRequestMessage()
    }
    set {payload = .addPeerRequest(newValue)}
  }

  var submitTransactionRequest: Protowire_SubmitTransactionRequestMessage {
    get {
      if case .submitTransactionRequest(let v)? = payload {return v}
      return Protowire_SubmitTransactionRequestMessage()
    }
    set {payload = .submitTransactionRequest(newValue)}
  }

  var notifyVirtualChainChangedRequest: Protowire_NotifyVirtualChainChangedRequestMessage {
    get {
      if case .notifyVirtualChainChangedRequest(let v)? = payload {return v}
      return Protowire_NotifyVirtualChainChangedRequestMessage()
    }
    set {payload = .notifyVirtualChainChangedRequest(newValue)}
  }

  /// VirtualChainChangedNotificationMessage virtualChainChangedNotification = 1024;
  var getBlockRequest: Protowire_GetBlockRequestMessage {
    get {
      if case .getBlockRequest(let v)? = payload {return v}
      return Protowire_GetBlockRequestMessage()
    }
    set {payload = .getBlockRequest(newValue)}
  }

  var getSubnetworkRequest: Protowire_GetSubnetworkRequestMessage {
    get {
      if case .getSubnetworkRequest(let v)? = payload {return v}
      return Protowire_GetSubnetworkRequestMessage()
    }
    set {payload = .getSubnetworkRequest(newValue)}
  }

  var getVirtualChainFromBlockRequest: Protowire_GetVirtualChainFromBlockRequestMessage {
    get {
      if case .getVirtualChainFromBlockRequest(let v)? = payload {return v}
      return Protowire_GetVirtualChainFromBlockRequestMessage()
    }
    set {payload = .getVirtualChainFromBlockRequest(newValue)}
  }

  var getBlocksRequest: Protowire_GetBlocksRequestMessage {
    get {
      if case .getBlocksRequest(let v)? = payload {return v}
      return Protowire_GetBlocksRequestMessage()
    }
    set {payload = .getBlocksRequest(newValue)}
  }

  var getBlockCountRequest: Protowire_GetBlockCountRequestMessage {
    get {
      if case .getBlockCountRequest(let v)? = payload {return v}
      return Protowire_GetBlockCountRequestMessage()
    }
    set {payload = .getBlockCountRequest(newValue)}
  }

  var getBlockDagInfoRequest: Protowire_GetBlockDagInfoRequestMessage {
    get {
      if case .getBlockDagInfoRequest(let v)? = payload {return v}
      return Protowire_GetBlockDagInfoRequestMessage()
    }
    set {payload = .getBlockDagInfoRequest(newValue)}
  }

  var resolveFinalityConflictRequest: Protowire_ResolveFinalityConflictRequestMessage {
    get {
      if case .resolveFinalityConflictRequest(let v)? = payload {return v}
      return Protowire_ResolveFinalityConflictRequestMessage()
    }
    set {payload = .resolveFinalityConflictRequest(newValue)}
  }

  var notifyFinalityConflictRequest: Protowire_NotifyFinalityConflictRequestMessage {
    get {
      if case .notifyFinalityConflictRequest(let v)? = payload {return v}
      return Protowire_NotifyFinalityConflictRequestMessage()
    }
    set {payload = .notifyFinalityConflictRequest(newValue)}
  }

  /// FinalityConflictNotificationMessage finalityConflictNotification = 1041;
  /// FinalityConflictResolvedNotificationMessage finalityConflictResolvedNotification = 1042;
  var getMempoolEntriesRequest: Protowire_GetMempoolEntriesRequestMessage {
    get {
      if case .getMempoolEntriesRequest(let v)? = payload {return v}
      return Protowire_GetMempoolEntriesRequestMessage()
    }
    set {payload = .getMempoolEntriesRequest(newValue)}
  }

  var shutdownRequest: Protowire_ShutdownRequestMessage {
    get {
      if case .shutdownRequest(let v)? = payload {return v}
      return Protowire_ShutdownRequestMessage()
    }
    set {payload = .shutdownRequest(newValue)}
  }

  var getHeadersRequest: Protowire_GetHeadersRequestMessage {
    get {
      if case .getHeadersRequest(let v)? = payload {return v}
      return Protowire_GetHeadersRequestMessage()
    }
    set {payload = .getHeadersRequest(newValue)}
  }

  var notifyUtxosChangedRequest: Protowire_NotifyUtxosChangedRequestMessage {
    get {
      if case .notifyUtxosChangedRequest(let v)? = payload {return v}
      return Protowire_NotifyUtxosChangedRequestMessage()
    }
    set {payload = .notifyUtxosChangedRequest(newValue)}
  }

  /// UtxosChangedNotificationMessage utxosChangedNotification = 1051;
  var getUtxosByAddressesRequest: Protowire_GetUtxosByAddressesRequestMessage {
    get {
      if case .getUtxosByAddressesRequest(let v)? = payload {return v}
      return Protowire_GetUtxosByAddressesRequestMessage()
    }
    set {payload = .getUtxosByAddressesRequest(newValue)}
  }

  var getSinkBlueScoreRequest: Protowire_GetSinkBlueScoreRequestMessage {
    get {
      if case .getSinkBlueScoreRequest(let v)? = payload {return v}
      return Protowire_GetSinkBlueScoreRequestMessage()
    }
    set {payload = .getSinkBlueScoreRequest(newValue)}
  }

  var notifySinkBlueScoreChangedRequest: Protowire_NotifySinkBlueScoreChangedRequestMessage {
    get {
      if case .notifySinkBlueScoreChangedRequest(let v)? = payload {return v}
      return Protowire_NotifySinkBlueScoreChangedRequestMessage()
    }
    set {payload = .notifySinkBlueScoreChangedRequest(newValue)}
  }

  /// SinkBlueScoreChangedNotificationMessage sinkBlueScoreChangedNotification = 1058;
  var banRequest: Protowire_BanRequestMessage {
    get {
      if case .banRequest(let v)? = payload {return v}
      return Protowire_BanRequestMessage()
    }
    set {payload = .banRequest(newValue)}
  }

  var unbanRequest: Protowire_UnbanRequestMessage {
    get {
      if case .unbanRequest(let v)? = payload {return v}
      return Protowire_UnbanRequestMessage()
    }
    set {payload = .unbanRequest(newValue)}
  }

  var getInfoRequest: Protowire_GetInfoRequestMessage {
    get {
      if case .getInfoRequest(let v)? = payload {return v}
      return Protowire_GetInfoRequestMessage()
    }
    set {payload = .getInfoRequest(newValue)}
  }

  var stopNotifyingUtxosChangedRequest: Protowire_StopNotifyingUtxosChangedRequestMessage {
    get {
      if case .stopNotifyingUtxosChangedRequest(let v)? = payload {return v}
      return Protowire_StopNotifyingUtxosChangedRequestMessage()
    }
    set {payload = .stopNotifyingUtxosChangedRequest(newValue)}
  }

  var notifyPruningPointUtxoSetOverrideRequest: Protowire_NotifyPruningPointUtxoSetOverrideRequestMessage {
    get {
      if case .notifyPruningPointUtxoSetOverrideRequest(let v)? = payload {return v}
      return Protowire_NotifyPruningPointUtxoSetOverrideRequestMessage()
    }
    set {payload = .notifyPruningPointUtxoSetOverrideRequest(newValue)}
  }

  /// PruningPointUtxoSetOverrideNotificationMessage pruningPointUtxoSetOverrideNotification = 1069;
  var stopNotifyingPruningPointUtxoSetOverrideRequest: Protowire_StopNotifyingPruningPointUtxoSetOverrideRequestMessage {
    get {
      if case .stopNotifyingPruningPointUtxoSetOverrideRequest(let v)? = payload {return v}
      return Protowire_StopNotifyingPruningPointUtxoSetOverrideRequestMessage()
    }
    set {payload = .stopNotifyingPruningPointUtxoSetOverrideRequest(newValue)}
  }

  var estimateNetworkHashesPerSecondRequest: Protowire_EstimateNetworkHashesPerSecondRequestMessage {
    get {
      if case .estimateNetworkHashesPerSecondRequest(let v)? = payload {return v}
      return Protowire_EstimateNetworkHashesPerSecondRequestMessage()
    }
    set {payload = .estimateNetworkHashesPerSecondRequest(newValue)}
  }

  var notifyVirtualDaaScoreChangedRequest: Protowire_NotifyVirtualDaaScoreChangedRequestMessage {
    get {
      if case .notifyVirtualDaaScoreChangedRequest(let v)? = payload {return v}
      return Protowire_NotifyVirtualDaaScoreChangedRequestMessage()
    }
    set {payload = .notifyVirtualDaaScoreChangedRequest(newValue)}
  }

  /// VirtualDaaScoreChangedNotificationMessage virtualDaaScoreChangedNotification = 1076;
  var getBalanceByAddressRequest: Protowire_GetBalanceByAddressRequestMessage {
    get {
      if case .getBalanceByAddressRequest(let v)? = payload {return v}
      return Protowire_GetBalanceByAddressRequestMessage()
    }
    set {payload = .getBalanceByAddressRequest(newValue)}
  }

  var getBalancesByAddressesRequest: Protowire_GetBalancesByAddressesRequestMessage {
    get {
      if case .getBalancesByAddressesRequest(let v)? = payload {return v}
      return Protowire_GetBalancesByAddressesRequestMessage()
    }
    set {payload = .getBalancesByAddressesRequest(newValue)}
  }

  var notifyNewBlockTemplateRequest: Protowire_NotifyNewBlockTemplateRequestMessage {
    get {
      if case .notifyNewBlockTemplateRequest(let v)? = payload {return v}
      return Protowire_NotifyNewBlockTemplateRequestMessage()
    }
    set {payload = .notifyNewBlockTemplateRequest(newValue)}
  }

  /// NewBlockTemplateNotificationMessage newBlockTemplateNotification = 1083;
  var getMempoolEntriesByAddressesRequest: Protowire_GetMempoolEntriesByAddressesRequestMessage {
    get {
      if case .getMempoolEntriesByAddressesRequest(let v)? = payload {return v}
      return Protowire_GetMempoolEntriesByAddressesRequestMessage()
    }
    set {payload = .getMempoolEntriesByAddressesRequest(newValue)}
  }

  var getCoinSupplyRequest: Protowire_GetCoinSupplyRequestMessage {
    get {
      if case .getCoinSupplyRequest(let v)? = payload {return v}
      return Protowire_GetCoinSupplyRequestMessage()
    }
    set {payload = .getCoinSupplyRequest(newValue)}
  }

  var pingRequest: Protowire_PingRequestMessage {
    get {
      if case .pingRequest(let v)? = payload {return v}
      return Protowire_PingRequestMessage()
    }
    set {payload = .pingRequest(newValue)}
  }

  var getMetricsRequest: Protowire_GetMetricsRequestMessage {
    get {
      if case .getMetricsRequest(let v)? = payload {return v}
      return Protowire_GetMetricsRequestMessage()
    }
    set {payload = .getMetricsRequest(newValue)}
  }

  var getServerInfoRequest: Protowire_GetServerInfoRequestMessage {
    get {
      if case .getServerInfoRequest(let v)? = payload {return v}
      return Protowire_GetServerInfoRequestMessage()
    }
    set {payload = .getServerInfoRequest(newValue)}
  }

  var getSyncStatusRequest: Protowire_GetSyncStatusRequestMessage {
    get {
      if case .getSyncStatusRequest(let v)? = payload {return v}
      return Protowire_GetSyncStatusRequestMessage()
    }
    set {payload = .getSyncStatusRequest(newValue)}
  }

  var getDaaScoreTimestampEstimateRequest: Protowire_GetDaaScoreTimestampEstimateRequestMessage {
    get {
      if case .getDaaScoreTimestampEstimateRequest(let v)? = payload {return v}
      return Protowire_GetDaaScoreTimestampEstimateRequestMessage()
    }
    set {payload = .getDaaScoreTimestampEstimateRequest(newValue)}
  }

  var submitTransactionReplacementRequest: Protowire_SubmitTransactionReplacementRequestMessage {
    get {
      if case .submitTransactionReplacementRequest(let v)? = payload {return v}
      return Protowire_SubmitTransactionReplacementRequestMessage()
    }
    set {payload = .submitTransactionReplacementRequest(newValue)}
  }

  var getConnectionsRequest: Protowire_GetConnectionsRequestMessage {
    get {
      if case .getConnectionsRequest(let v)? = payload {return v}
      return Protowire_GetConnectionsRequestMessage()
    }
    set {payload = .getConnectionsRequest(newValue)}
  }

  var getSystemInfoRequest: Protowire_GetSystemInfoRequestMessage {
    get {
      if case .getSystemInfoRequest(let v)? = payload {return v}
      return Protowire_GetSystemInfoRequestMessage()
    }
    set {payload = .getSystemInfoRequest(newValue)}
  }

  var getFeeEstimateRequest: Protowire_GetFeeEstimateRequestMessage {
    get {
      if case .getFeeEstimateRequest(let v)? = payload {return v}
      return Protowire_GetFeeEstimateRequestMessage()
    }
    set {payload = .getFeeEstimateRequest(newValue)}
  }

  var getFeeEstimateExperimentalRequest: Protowire_GetFeeEstimateExperimentalRequestMessage {
    get {
      if case .getFeeEstimateExperimentalRequest(let v)? = payload {return v}
      return Protowire_GetFeeEstimateExperimentalRequestMessage()
    }
    set {payload = .getFeeEstimateExperimentalRequest(newValue)}
  }

  var getCurrentBlockColorRequest: Protowire_GetCurrentBlockColorRequestMessage {
    get {
      if case .getCurrentBlockColorRequest(let v)? = payload {return v}
      return Protowire_GetCurrentBlockColorRequestMessage()
    }
    set {payload = .getCurrentBlockColorRequest(newValue)}
  }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Payload: Equatable, Sendable {
    case getCurrentNetworkRequest(Protowire_GetCurrentNetworkRequestMessage)
    case submitBlockRequest(Protowire_SubmitBlockRequestMessage)
    case getBlockTemplateRequest(Protowire_GetBlockTemplateRequestMessage)
    case notifyBlockAddedRequest(Protowire_NotifyBlockAddedRequestMessage)
    /// BlockAddedNotificationMessage blockAddedNotification = 1009;
    case getPeerAddressesRequest(Protowire_GetPeerAddressesRequestMessage)
    case getSinkRequest(Protowire_GetSinkRequestMessage)
    case getMempoolEntryRequest(Protowire_GetMempoolEntryRequestMessage)
    case getConnectedPeerInfoRequest(Protowire_GetConnectedPeerInfoRequestMessage)
    case addPeerRequest(Protowire_AddPeerRequestMessage)
    case submitTransactionRequest(Protowire_SubmitTransactionRequestMessage)
    case notifyVirtualChainChangedRequest(Protowire_NotifyVirtualChainChangedRequestMessage)
    /// VirtualChainChangedNotificationMessage virtualChainChangedNotification = 1024;
    case getBlockRequest(Protowire_GetBlockRequestMessage)
    case getSubnetworkRequest(Protowire_GetSubnetworkRequestMessage)
    case getVirtualChainFromBlockRequest(Protowire_GetVirtualChainFromBlockRequestMessage)
    case getBlocksRequest(Protowire_GetBlocksRequestMessage)
    case getBlockCountRequest(Protowire_GetBlockCountRequestMessage)
    case getBlockDagInfoRequest(Protowire_GetBlockDagInfoRequestMessage)
    case resolveFinalityConflictRequest(Protowire_ResolveFinalityConflictRequestMessage)
    case notifyFinalityConflictRequest(Protowire_NotifyFinalityConflictRequestMessage)
    /// FinalityConflictNotificationMessage finalityConflictNotification = 1041;
    /// FinalityConflictResolvedNotificationMessage finalityConflictResolvedNotification = 1042;
    case getMempoolEntriesRequest(Protowire_GetMempoolEntriesRequestMessage)
    case shutdownRequest(Protowire_ShutdownRequestMessage)
    case getHeadersRequest(Protowire_GetHeadersRequestMessage)
    case notifyUtxosChangedRequest(Protowire_NotifyUtxosChangedRequestMessage)
    /// UtxosChangedNotificationMessage utxosChangedNotification = 1051;
    case getUtxosByAddressesRequest(Protowire_GetUtxosByAddressesRequestMessage)
    case getSinkBlueScoreRequest(Protowire_GetSinkBlueScoreRequestMessage)
    case notifySinkBlueScoreChangedRequest(Protowire_NotifySinkBlueScoreChangedRequestMessage)
    /// SinkBlueScoreChangedNotificationMessage sinkBlueScoreChangedNotification = 1058;
    case banRequest(Protowire_BanRequestMessage)
    case unbanRequest(Protowire_UnbanRequestMessage)
    case getInfoRequest(Protowire_GetInfoRequestMessage)
    case stopNotifyingUtxosChangedRequest(Protowire_StopNotifyingUtxosChangedRequestMessage)
    case notifyPruningPointUtxoSetOverrideRequest(Protowire_NotifyPruningPointUtxoSetOverrideRequestMessage)
    /// PruningPointUtxoSetOverrideNotificationMessage pruningPointUtxoSetOverrideNotification = 1069;
    case stopNotifyingPruningPointUtxoSetOverrideRequest(Protowire_StopNotifyingPruningPointUtxoSetOverrideRequestMessage)
    case estimateNetworkHashesPerSecondRequest(Protowire_EstimateNetworkHashesPerSecondRequestMessage)
    case notifyVirtualDaaScoreChangedRequest(Protowire_NotifyVirtualDaaScoreChangedRequestMessage)
    /// VirtualDaaScoreChangedNotificationMessage virtualDaaScoreChangedNotification = 1076;
    case getBalanceByAddressRequest(Protowire_GetBalanceByAddressRequestMessage)
    case getBalancesByAddressesRequest(Protowire_GetBalancesByAddressesRequestMessage)
    case notifyNewBlockTemplateRequest(Protowire_NotifyNewBlockTemplateRequestMessage)
    /// NewBlockTemplateNotificationMessage newBlockTemplateNotification = 1083;
    case getMempoolEntriesByAddressesRequest(Protowire_GetMempoolEntriesByAddressesRequestMessage)
    case getCoinSupplyRequest(Protowire_GetCoinSupplyRequestMessage)
    case pingRequest(Protowire_PingRequestMessage)
    case getMetricsRequest(Protowire_GetMetricsRequestMessage)
    case getServerInfoRequest(Protowire_GetServerInfoRequestMessage)
    case getSyncStatusRequest(Protowire_GetSyncStatusRequestMessage)
    case getDaaScoreTimestampEstimateRequest(Protowire_GetDaaScoreTimestampEstimateRequestMessage)
    case submitTransactionReplacementRequest(Protowire_SubmitTransactionReplacementRequestMessage)
    case getConnectionsRequest(Protowire_GetConnectionsRequestMessage)
    case getSystemInfoRequest(Protowire_GetSystemInfoRequestMessage)
    case getFeeEstimateRequest(Protowire_GetFeeEstimateRequestMessage)
    case getFeeEstimateExperimentalRequest(Protowire_GetFeeEstimateExperimentalRequestMessage)
    case getCurrentBlockColorRequest(Protowire_GetCurrentBlockColorRequestMessage)

  }

    public init() {}
}

public struct Protowire_KaspadResponse: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var payload: OneOf_Payload? {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  var getCurrentNetworkResponse: Protowire_GetCurrentNetworkResponseMessage {
    get {
      if case .getCurrentNetworkResponse(let v)? = _storage._payload {return v}
      return Protowire_GetCurrentNetworkResponseMessage()
    }
    set {_uniqueStorage()._payload = .getCurrentNetworkResponse(newValue)}
  }

  var submitBlockResponse: Protowire_SubmitBlockResponseMessage {
    get {
      if case .submitBlockResponse(let v)? = _storage._payload {return v}
      return Protowire_SubmitBlockResponseMessage()
    }
    set {_uniqueStorage()._payload = .submitBlockResponse(newValue)}
  }

  var getBlockTemplateResponse: Protowire_GetBlockTemplateResponseMessage {
    get {
      if case .getBlockTemplateResponse(let v)? = _storage._payload {return v}
      return Protowire_GetBlockTemplateResponseMessage()
    }
    set {_uniqueStorage()._payload = .getBlockTemplateResponse(newValue)}
  }

  var notifyBlockAddedResponse: Protowire_NotifyBlockAddedResponseMessage {
    get {
      if case .notifyBlockAddedResponse(let v)? = _storage._payload {return v}
      return Protowire_NotifyBlockAddedResponseMessage()
    }
    set {_uniqueStorage()._payload = .notifyBlockAddedResponse(newValue)}
  }

  var blockAddedNotification: Protowire_BlockAddedNotificationMessage {
    get {
      if case .blockAddedNotification(let v)? = _storage._payload {return v}
      return Protowire_BlockAddedNotificationMessage()
    }
    set {_uniqueStorage()._payload = .blockAddedNotification(newValue)}
  }

  var getPeerAddressesResponse: Protowire_GetPeerAddressesResponseMessage {
    get {
      if case .getPeerAddressesResponse(let v)? = _storage._payload {return v}
      return Protowire_GetPeerAddressesResponseMessage()
    }
    set {_uniqueStorage()._payload = .getPeerAddressesResponse(newValue)}
  }

  var getSinkResponse: Protowire_GetSinkResponseMessage {
    get {
      if case .getSinkResponse(let v)? = _storage._payload {return v}
      return Protowire_GetSinkResponseMessage()
    }
    set {_uniqueStorage()._payload = .getSinkResponse(newValue)}
  }

  var getMempoolEntryResponse: Protowire_GetMempoolEntryResponseMessage {
    get {
      if case .getMempoolEntryResponse(let v)? = _storage._payload {return v}
      return Protowire_GetMempoolEntryResponseMessage()
    }
    set {_uniqueStorage()._payload = .getMempoolEntryResponse(newValue)}
  }

  var getConnectedPeerInfoResponse: Protowire_GetConnectedPeerInfoResponseMessage {
    get {
      if case .getConnectedPeerInfoResponse(let v)? = _storage._payload {return v}
      return Protowire_GetConnectedPeerInfoResponseMessage()
    }
    set {_uniqueStorage()._payload = .getConnectedPeerInfoResponse(newValue)}
  }

  var addPeerResponse: Protowire_AddPeerResponseMessage {
    get {
      if case .addPeerResponse(let v)? = _storage._payload {return v}
      return Protowire_AddPeerResponseMessage()
    }
    set {_uniqueStorage()._payload = .addPeerResponse(newValue)}
  }

  var submitTransactionResponse: Protowire_SubmitTransactionResponseMessage {
    get {
      if case .submitTransactionResponse(let v)? = _storage._payload {return v}
      return Protowire_SubmitTransactionResponseMessage()
    }
    set {_uniqueStorage()._payload = .submitTransactionResponse(newValue)}
  }

  var notifyVirtualChainChangedResponse: Protowire_NotifyVirtualChainChangedResponseMessage {
    get {
      if case .notifyVirtualChainChangedResponse(let v)? = _storage._payload {return v}
      return Protowire_NotifyVirtualChainChangedResponseMessage()
    }
    set {_uniqueStorage()._payload = .notifyVirtualChainChangedResponse(newValue)}
  }

  var virtualChainChangedNotification: Protowire_VirtualChainChangedNotificationMessage {
    get {
      if case .virtualChainChangedNotification(let v)? = _storage._payload {return v}
      return Protowire_VirtualChainChangedNotificationMessage()
    }
    set {_uniqueStorage()._payload = .virtualChainChangedNotification(newValue)}
  }

  var getBlockResponse: Protowire_GetBlockResponseMessage {
    get {
      if case .getBlockResponse(let v)? = _storage._payload {return v}
      return Protowire_GetBlockResponseMessage()
    }
    set {_uniqueStorage()._payload = .getBlockResponse(newValue)}
  }

  var getSubnetworkResponse: Protowire_GetSubnetworkResponseMessage {
    get {
      if case .getSubnetworkResponse(let v)? = _storage._payload {return v}
      return Protowire_GetSubnetworkResponseMessage()
    }
    set {_uniqueStorage()._payload = .getSubnetworkResponse(newValue)}
  }

  var getVirtualChainFromBlockResponse: Protowire_GetVirtualChainFromBlockResponseMessage {
    get {
      if case .getVirtualChainFromBlockResponse(let v)? = _storage._payload {return v}
      return Protowire_GetVirtualChainFromBlockResponseMessage()
    }
    set {_uniqueStorage()._payload = .getVirtualChainFromBlockResponse(newValue)}
  }

  var getBlocksResponse: Protowire_GetBlocksResponseMessage {
    get {
      if case .getBlocksResponse(let v)? = _storage._payload {return v}
      return Protowire_GetBlocksResponseMessage()
    }
    set {_uniqueStorage()._payload = .getBlocksResponse(newValue)}
  }

  var getBlockCountResponse: Protowire_GetBlockCountResponseMessage {
    get {
      if case .getBlockCountResponse(let v)? = _storage._payload {return v}
      return Protowire_GetBlockCountResponseMessage()
    }
    set {_uniqueStorage()._payload = .getBlockCountResponse(newValue)}
  }

  var getBlockDagInfoResponse: Protowire_GetBlockDagInfoResponseMessage {
    get {
      if case .getBlockDagInfoResponse(let v)? = _storage._payload {return v}
      return Protowire_GetBlockDagInfoResponseMessage()
    }
    set {_uniqueStorage()._payload = .getBlockDagInfoResponse(newValue)}
  }

  var resolveFinalityConflictResponse: Protowire_ResolveFinalityConflictResponseMessage {
    get {
      if case .resolveFinalityConflictResponse(let v)? = _storage._payload {return v}
      return Protowire_ResolveFinalityConflictResponseMessage()
    }
    set {_uniqueStorage()._payload = .resolveFinalityConflictResponse(newValue)}
  }

  var notifyFinalityConflictResponse: Protowire_NotifyFinalityConflictResponseMessage {
    get {
      if case .notifyFinalityConflictResponse(let v)? = _storage._payload {return v}
      return Protowire_NotifyFinalityConflictResponseMessage()
    }
    set {_uniqueStorage()._payload = .notifyFinalityConflictResponse(newValue)}
  }

  var finalityConflictNotification: Protowire_FinalityConflictNotificationMessage {
    get {
      if case .finalityConflictNotification(let v)? = _storage._payload {return v}
      return Protowire_FinalityConflictNotificationMessage()
    }
    set {_uniqueStorage()._payload = .finalityConflictNotification(newValue)}
  }

  var finalityConflictResolvedNotification: Protowire_FinalityConflictResolvedNotificationMessage {
    get {
      if case .finalityConflictResolvedNotification(let v)? = _storage._payload {return v}
      return Protowire_FinalityConflictResolvedNotificationMessage()
    }
    set {_uniqueStorage()._payload = .finalityConflictResolvedNotification(newValue)}
  }

  var getMempoolEntriesResponse: Protowire_GetMempoolEntriesResponseMessage {
    get {
      if case .getMempoolEntriesResponse(let v)? = _storage._payload {return v}
      return Protowire_GetMempoolEntriesResponseMessage()
    }
    set {_uniqueStorage()._payload = .getMempoolEntriesResponse(newValue)}
  }

  var shutdownResponse: Protowire_ShutdownResponseMessage {
    get {
      if case .shutdownResponse(let v)? = _storage._payload {return v}
      return Protowire_ShutdownResponseMessage()
    }
    set {_uniqueStorage()._payload = .shutdownResponse(newValue)}
  }

  var getHeadersResponse: Protowire_GetHeadersResponseMessage {
    get {
      if case .getHeadersResponse(let v)? = _storage._payload {return v}
      return Protowire_GetHeadersResponseMessage()
    }
    set {_uniqueStorage()._payload = .getHeadersResponse(newValue)}
  }

  var notifyUtxosChangedResponse: Protowire_NotifyUtxosChangedResponseMessage {
    get {
      if case .notifyUtxosChangedResponse(let v)? = _storage._payload {return v}
      return Protowire_NotifyUtxosChangedResponseMessage()
    }
    set {_uniqueStorage()._payload = .notifyUtxosChangedResponse(newValue)}
  }

  var utxosChangedNotification: Protowire_UtxosChangedNotificationMessage {
    get {
      if case .utxosChangedNotification(let v)? = _storage._payload {return v}
      return Protowire_UtxosChangedNotificationMessage()
    }
    set {_uniqueStorage()._payload = .utxosChangedNotification(newValue)}
  }

  var getUtxosByAddressesResponse: Protowire_GetUtxosByAddressesResponseMessage {
    get {
      if case .getUtxosByAddressesResponse(let v)? = _storage._payload {return v}
      return Protowire_GetUtxosByAddressesResponseMessage()
    }
    set {_uniqueStorage()._payload = .getUtxosByAddressesResponse(newValue)}
  }

  var getSinkBlueScoreResponse: Protowire_GetSinkBlueScoreResponseMessage {
    get {
      if case .getSinkBlueScoreResponse(let v)? = _storage._payload {return v}
      return Protowire_GetSinkBlueScoreResponseMessage()
    }
    set {_uniqueStorage()._payload = .getSinkBlueScoreResponse(newValue)}
  }

  var notifySinkBlueScoreChangedResponse: Protowire_NotifySinkBlueScoreChangedResponseMessage {
    get {
      if case .notifySinkBlueScoreChangedResponse(let v)? = _storage._payload {return v}
      return Protowire_NotifySinkBlueScoreChangedResponseMessage()
    }
    set {_uniqueStorage()._payload = .notifySinkBlueScoreChangedResponse(newValue)}
  }

  var sinkBlueScoreChangedNotification: Protowire_SinkBlueScoreChangedNotificationMessage {
    get {
      if case .sinkBlueScoreChangedNotification(let v)? = _storage._payload {return v}
      return Protowire_SinkBlueScoreChangedNotificationMessage()
    }
    set {_uniqueStorage()._payload = .sinkBlueScoreChangedNotification(newValue)}
  }

  var banResponse: Protowire_BanResponseMessage {
    get {
      if case .banResponse(let v)? = _storage._payload {return v}
      return Protowire_BanResponseMessage()
    }
    set {_uniqueStorage()._payload = .banResponse(newValue)}
  }

  var unbanResponse: Protowire_UnbanResponseMessage {
    get {
      if case .unbanResponse(let v)? = _storage._payload {return v}
      return Protowire_UnbanResponseMessage()
    }
    set {_uniqueStorage()._payload = .unbanResponse(newValue)}
  }

  var getInfoResponse: Protowire_GetInfoResponseMessage {
    get {
      if case .getInfoResponse(let v)? = _storage._payload {return v}
      return Protowire_GetInfoResponseMessage()
    }
    set {_uniqueStorage()._payload = .getInfoResponse(newValue)}
  }

  var stopNotifyingUtxosChangedResponse: Protowire_StopNotifyingUtxosChangedResponseMessage {
    get {
      if case .stopNotifyingUtxosChangedResponse(let v)? = _storage._payload {return v}
      return Protowire_StopNotifyingUtxosChangedResponseMessage()
    }
    set {_uniqueStorage()._payload = .stopNotifyingUtxosChangedResponse(newValue)}
  }

  var notifyPruningPointUtxoSetOverrideResponse: Protowire_NotifyPruningPointUtxoSetOverrideResponseMessage {
    get {
      if case .notifyPruningPointUtxoSetOverrideResponse(let v)? = _storage._payload {return v}
      return Protowire_NotifyPruningPointUtxoSetOverrideResponseMessage()
    }
    set {_uniqueStorage()._payload = .notifyPruningPointUtxoSetOverrideResponse(newValue)}
  }

  var pruningPointUtxoSetOverrideNotification: Protowire_PruningPointUtxoSetOverrideNotificationMessage {
    get {
      if case .pruningPointUtxoSetOverrideNotification(let v)? = _storage._payload {return v}
      return Protowire_PruningPointUtxoSetOverrideNotificationMessage()
    }
    set {_uniqueStorage()._payload = .pruningPointUtxoSetOverrideNotification(newValue)}
  }

  var stopNotifyingPruningPointUtxoSetOverrideResponse: Protowire_StopNotifyingPruningPointUtxoSetOverrideResponseMessage {
    get {
      if case .stopNotifyingPruningPointUtxoSetOverrideResponse(let v)? = _storage._payload {return v}
      return Protowire_StopNotifyingPruningPointUtxoSetOverrideResponseMessage()
    }
    set {_uniqueStorage()._payload = .stopNotifyingPruningPointUtxoSetOverrideResponse(newValue)}
  }

  var estimateNetworkHashesPerSecondResponse: Protowire_EstimateNetworkHashesPerSecondResponseMessage {
    get {
      if case .estimateNetworkHashesPerSecondResponse(let v)? = _storage._payload {return v}
      return Protowire_EstimateNetworkHashesPerSecondResponseMessage()
    }
    set {_uniqueStorage()._payload = .estimateNetworkHashesPerSecondResponse(newValue)}
  }

  var notifyVirtualDaaScoreChangedResponse: Protowire_NotifyVirtualDaaScoreChangedResponseMessage {
    get {
      if case .notifyVirtualDaaScoreChangedResponse(let v)? = _storage._payload {return v}
      return Protowire_NotifyVirtualDaaScoreChangedResponseMessage()
    }
    set {_uniqueStorage()._payload = .notifyVirtualDaaScoreChangedResponse(newValue)}
  }

  var virtualDaaScoreChangedNotification: Protowire_VirtualDaaScoreChangedNotificationMessage {
    get {
      if case .virtualDaaScoreChangedNotification(let v)? = _storage._payload {return v}
      return Protowire_VirtualDaaScoreChangedNotificationMessage()
    }
    set {_uniqueStorage()._payload = .virtualDaaScoreChangedNotification(newValue)}
  }

  var getBalanceByAddressResponse: Protowire_GetBalanceByAddressResponseMessage {
    get {
      if case .getBalanceByAddressResponse(let v)? = _storage._payload {return v}
      return Protowire_GetBalanceByAddressResponseMessage()
    }
    set {_uniqueStorage()._payload = .getBalanceByAddressResponse(newValue)}
  }

  var getBalancesByAddressesResponse: Protowire_GetBalancesByAddressesResponseMessage {
    get {
      if case .getBalancesByAddressesResponse(let v)? = _storage._payload {return v}
      return Protowire_GetBalancesByAddressesResponseMessage()
    }
    set {_uniqueStorage()._payload = .getBalancesByAddressesResponse(newValue)}
  }

  var notifyNewBlockTemplateResponse: Protowire_NotifyNewBlockTemplateResponseMessage {
    get {
      if case .notifyNewBlockTemplateResponse(let v)? = _storage._payload {return v}
      return Protowire_NotifyNewBlockTemplateResponseMessage()
    }
    set {_uniqueStorage()._payload = .notifyNewBlockTemplateResponse(newValue)}
  }

  var newBlockTemplateNotification: Protowire_NewBlockTemplateNotificationMessage {
    get {
      if case .newBlockTemplateNotification(let v)? = _storage._payload {return v}
      return Protowire_NewBlockTemplateNotificationMessage()
    }
    set {_uniqueStorage()._payload = .newBlockTemplateNotification(newValue)}
  }

  var getMempoolEntriesByAddressesResponse: Protowire_GetMempoolEntriesByAddressesResponseMessage {
    get {
      if case .getMempoolEntriesByAddressesResponse(let v)? = _storage._payload {return v}
      return Protowire_GetMempoolEntriesByAddressesResponseMessage()
    }
    set {_uniqueStorage()._payload = .getMempoolEntriesByAddressesResponse(newValue)}
  }

  var getCoinSupplyResponse: Protowire_GetCoinSupplyResponseMessage {
    get {
      if case .getCoinSupplyResponse(let v)? = _storage._payload {return v}
      return Protowire_GetCoinSupplyResponseMessage()
    }
    set {_uniqueStorage()._payload = .getCoinSupplyResponse(newValue)}
  }

  var pingResponse: Protowire_PingResponseMessage {
    get {
      if case .pingResponse(let v)? = _storage._payload {return v}
      return Protowire_PingResponseMessage()
    }
    set {_uniqueStorage()._payload = .pingResponse(newValue)}
  }

  var getMetricsResponse: Protowire_GetMetricsResponseMessage {
    get {
      if case .getMetricsResponse(let v)? = _storage._payload {return v}
      return Protowire_GetMetricsResponseMessage()
    }
    set {_uniqueStorage()._payload = .getMetricsResponse(newValue)}
  }

  var getServerInfoResponse: Protowire_GetServerInfoResponseMessage {
    get {
      if case .getServerInfoResponse(let v)? = _storage._payload {return v}
      return Protowire_GetServerInfoResponseMessage()
    }
    set {_uniqueStorage()._payload = .getServerInfoResponse(newValue)}
  }

  var getSyncStatusResponse: Protowire_GetSyncStatusResponseMessage {
    get {
      if case .getSyncStatusResponse(let v)? = _storage._payload {return v}
      return Protowire_GetSyncStatusResponseMessage()
    }
    set {_uniqueStorage()._payload = .getSyncStatusResponse(newValue)}
  }

  var getDaaScoreTimestampEstimateResponse: Protowire_GetDaaScoreTimestampEstimateResponseMessage {
    get {
      if case .getDaaScoreTimestampEstimateResponse(let v)? = _storage._payload {return v}
      return Protowire_GetDaaScoreTimestampEstimateResponseMessage()
    }
    set {_uniqueStorage()._payload = .getDaaScoreTimestampEstimateResponse(newValue)}
  }

  var submitTransactionReplacementResponse: Protowire_SubmitTransactionReplacementResponseMessage {
    get {
      if case .submitTransactionReplacementResponse(let v)? = _storage._payload {return v}
      return Protowire_SubmitTransactionReplacementResponseMessage()
    }
    set {_uniqueStorage()._payload = .submitTransactionReplacementResponse(newValue)}
  }

  var getConnectionsResponse: Protowire_GetConnectionsResponseMessage {
    get {
      if case .getConnectionsResponse(let v)? = _storage._payload {return v}
      return Protowire_GetConnectionsResponseMessage()
    }
    set {_uniqueStorage()._payload = .getConnectionsResponse(newValue)}
  }

  var getSystemInfoResponse: Protowire_GetSystemInfoResponseMessage {
    get {
      if case .getSystemInfoResponse(let v)? = _storage._payload {return v}
      return Protowire_GetSystemInfoResponseMessage()
    }
    set {_uniqueStorage()._payload = .getSystemInfoResponse(newValue)}
  }

  var getFeeEstimateResponse: Protowire_GetFeeEstimateResponseMessage {
    get {
      if case .getFeeEstimateResponse(let v)? = _storage._payload {return v}
      return Protowire_GetFeeEstimateResponseMessage()
    }
    set {_uniqueStorage()._payload = .getFeeEstimateResponse(newValue)}
  }

  var getFeeEstimateExperimentalResponse: Protowire_GetFeeEstimateExperimentalResponseMessage {
    get {
      if case .getFeeEstimateExperimentalResponse(let v)? = _storage._payload {return v}
      return Protowire_GetFeeEstimateExperimentalResponseMessage()
    }
    set {_uniqueStorage()._payload = .getFeeEstimateExperimentalResponse(newValue)}
  }

  var getCurrentBlockColorResponse: Protowire_GetCurrentBlockColorResponseMessage {
    get {
      if case .getCurrentBlockColorResponse(let v)? = _storage._payload {return v}
      return Protowire_GetCurrentBlockColorResponseMessage()
    }
    set {_uniqueStorage()._payload = .getCurrentBlockColorResponse(newValue)}
  }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Payload: Equatable, Sendable {
    case getCurrentNetworkResponse(Protowire_GetCurrentNetworkResponseMessage)
    case submitBlockResponse(Protowire_SubmitBlockResponseMessage)
    case getBlockTemplateResponse(Protowire_GetBlockTemplateResponseMessage)
    case notifyBlockAddedResponse(Protowire_NotifyBlockAddedResponseMessage)
    case blockAddedNotification(Protowire_BlockAddedNotificationMessage)
    case getPeerAddressesResponse(Protowire_GetPeerAddressesResponseMessage)
    case getSinkResponse(Protowire_GetSinkResponseMessage)
    case getMempoolEntryResponse(Protowire_GetMempoolEntryResponseMessage)
    case getConnectedPeerInfoResponse(Protowire_GetConnectedPeerInfoResponseMessage)
    case addPeerResponse(Protowire_AddPeerResponseMessage)
    case submitTransactionResponse(Protowire_SubmitTransactionResponseMessage)
    case notifyVirtualChainChangedResponse(Protowire_NotifyVirtualChainChangedResponseMessage)
    case virtualChainChangedNotification(Protowire_VirtualChainChangedNotificationMessage)
    case getBlockResponse(Protowire_GetBlockResponseMessage)
    case getSubnetworkResponse(Protowire_GetSubnetworkResponseMessage)
    case getVirtualChainFromBlockResponse(Protowire_GetVirtualChainFromBlockResponseMessage)
    case getBlocksResponse(Protowire_GetBlocksResponseMessage)
    case getBlockCountResponse(Protowire_GetBlockCountResponseMessage)
    case getBlockDagInfoResponse(Protowire_GetBlockDagInfoResponseMessage)
    case resolveFinalityConflictResponse(Protowire_ResolveFinalityConflictResponseMessage)
    case notifyFinalityConflictResponse(Protowire_NotifyFinalityConflictResponseMessage)
    case finalityConflictNotification(Protowire_FinalityConflictNotificationMessage)
    case finalityConflictResolvedNotification(Protowire_FinalityConflictResolvedNotificationMessage)
    case getMempoolEntriesResponse(Protowire_GetMempoolEntriesResponseMessage)
    case shutdownResponse(Protowire_ShutdownResponseMessage)
    case getHeadersResponse(Protowire_GetHeadersResponseMessage)
    case notifyUtxosChangedResponse(Protowire_NotifyUtxosChangedResponseMessage)
    case utxosChangedNotification(Protowire_UtxosChangedNotificationMessage)
    case getUtxosByAddressesResponse(Protowire_GetUtxosByAddressesResponseMessage)
    case getSinkBlueScoreResponse(Protowire_GetSinkBlueScoreResponseMessage)
    case notifySinkBlueScoreChangedResponse(Protowire_NotifySinkBlueScoreChangedResponseMessage)
    case sinkBlueScoreChangedNotification(Protowire_SinkBlueScoreChangedNotificationMessage)
    case banResponse(Protowire_BanResponseMessage)
    case unbanResponse(Protowire_UnbanResponseMessage)
    case getInfoResponse(Protowire_GetInfoResponseMessage)
    case stopNotifyingUtxosChangedResponse(Protowire_StopNotifyingUtxosChangedResponseMessage)
    case notifyPruningPointUtxoSetOverrideResponse(Protowire_NotifyPruningPointUtxoSetOverrideResponseMessage)
    case pruningPointUtxoSetOverrideNotification(Protowire_PruningPointUtxoSetOverrideNotificationMessage)
    case stopNotifyingPruningPointUtxoSetOverrideResponse(Protowire_StopNotifyingPruningPointUtxoSetOverrideResponseMessage)
    case estimateNetworkHashesPerSecondResponse(Protowire_EstimateNetworkHashesPerSecondResponseMessage)
    case notifyVirtualDaaScoreChangedResponse(Protowire_NotifyVirtualDaaScoreChangedResponseMessage)
    case virtualDaaScoreChangedNotification(Protowire_VirtualDaaScoreChangedNotificationMessage)
    case getBalanceByAddressResponse(Protowire_GetBalanceByAddressResponseMessage)
    case getBalancesByAddressesResponse(Protowire_GetBalancesByAddressesResponseMessage)
    case notifyNewBlockTemplateResponse(Protowire_NotifyNewBlockTemplateResponseMessage)
    case newBlockTemplateNotification(Protowire_NewBlockTemplateNotificationMessage)
    case getMempoolEntriesByAddressesResponse(Protowire_GetMempoolEntriesByAddressesResponseMessage)
    case getCoinSupplyResponse(Protowire_GetCoinSupplyResponseMessage)
    case pingResponse(Protowire_PingResponseMessage)
    case getMetricsResponse(Protowire_GetMetricsResponseMessage)
    case getServerInfoResponse(Protowire_GetServerInfoResponseMessage)
    case getSyncStatusResponse(Protowire_GetSyncStatusResponseMessage)
    case getDaaScoreTimestampEstimateResponse(Protowire_GetDaaScoreTimestampEstimateResponseMessage)
    case submitTransactionReplacementResponse(Protowire_SubmitTransactionReplacementResponseMessage)
    case getConnectionsResponse(Protowire_GetConnectionsResponseMessage)
    case getSystemInfoResponse(Protowire_GetSystemInfoResponseMessage)
    case getFeeEstimateResponse(Protowire_GetFeeEstimateResponseMessage)
    case getFeeEstimateExperimentalResponse(Protowire_GetFeeEstimateExperimentalResponseMessage)
    case getCurrentBlockColorResponse(Protowire_GetCurrentBlockColorResponseMessage)

  }

    public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protowire"

extension Protowire_KaspadRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".KaspadRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    101: .same(proto: "id"),
    1001: .same(proto: "getCurrentNetworkRequest"),
    1003: .same(proto: "submitBlockRequest"),
    1005: .same(proto: "getBlockTemplateRequest"),
    1007: .same(proto: "notifyBlockAddedRequest"),
    1010: .same(proto: "getPeerAddressesRequest"),
    1012: .same(proto: "GetSinkRequest"),
    1014: .same(proto: "getMempoolEntryRequest"),
    1016: .same(proto: "getConnectedPeerInfoRequest"),
    1018: .same(proto: "addPeerRequest"),
    1020: .same(proto: "submitTransactionRequest"),
    1022: .same(proto: "notifyVirtualChainChangedRequest"),
    1025: .same(proto: "getBlockRequest"),
    1027: .same(proto: "getSubnetworkRequest"),
    1029: .same(proto: "getVirtualChainFromBlockRequest"),
    1031: .same(proto: "getBlocksRequest"),
    1033: .same(proto: "getBlockCountRequest"),
    1035: .same(proto: "getBlockDagInfoRequest"),
    1037: .same(proto: "resolveFinalityConflictRequest"),
    1039: .same(proto: "notifyFinalityConflictRequest"),
    1043: .same(proto: "getMempoolEntriesRequest"),
    1045: .same(proto: "shutdownRequest"),
    1047: .same(proto: "getHeadersRequest"),
    1049: .same(proto: "notifyUtxosChangedRequest"),
    1052: .same(proto: "getUtxosByAddressesRequest"),
    1054: .same(proto: "getSinkBlueScoreRequest"),
    1056: .same(proto: "notifySinkBlueScoreChangedRequest"),
    1059: .same(proto: "banRequest"),
    1061: .same(proto: "unbanRequest"),
    1063: .same(proto: "getInfoRequest"),
    1065: .same(proto: "stopNotifyingUtxosChangedRequest"),
    1067: .same(proto: "notifyPruningPointUtxoSetOverrideRequest"),
    1070: .same(proto: "stopNotifyingPruningPointUtxoSetOverrideRequest"),
    1072: .same(proto: "estimateNetworkHashesPerSecondRequest"),
    1074: .same(proto: "notifyVirtualDaaScoreChangedRequest"),
    1077: .same(proto: "getBalanceByAddressRequest"),
    1079: .same(proto: "getBalancesByAddressesRequest"),
    1081: .same(proto: "notifyNewBlockTemplateRequest"),
    1084: .same(proto: "getMempoolEntriesByAddressesRequest"),
    1086: .same(proto: "getCoinSupplyRequest"),
    1088: .same(proto: "pingRequest"),
    1090: .same(proto: "getMetricsRequest"),
    1092: .same(proto: "getServerInfoRequest"),
    1094: .same(proto: "getSyncStatusRequest"),
    1096: .same(proto: "getDaaScoreTimestampEstimateRequest"),
    1100: .same(proto: "submitTransactionReplacementRequest"),
    1102: .same(proto: "getConnectionsRequest"),
    1104: .same(proto: "getSystemInfoRequest"),
    1106: .same(proto: "getFeeEstimateRequest"),
    1108: .same(proto: "getFeeEstimateExperimentalRequest"),
    1110: .same(proto: "getCurrentBlockColorRequest"),
  ]

    mutating public func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 101: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 1001: try {
        var v: Protowire_GetCurrentNetworkRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getCurrentNetworkRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getCurrentNetworkRequest(v)
        }
      }()
      case 1003: try {
        var v: Protowire_SubmitBlockRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .submitBlockRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .submitBlockRequest(v)
        }
      }()
      case 1005: try {
        var v: Protowire_GetBlockTemplateRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getBlockTemplateRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getBlockTemplateRequest(v)
        }
      }()
      case 1007: try {
        var v: Protowire_NotifyBlockAddedRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .notifyBlockAddedRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .notifyBlockAddedRequest(v)
        }
      }()
      case 1010: try {
        var v: Protowire_GetPeerAddressesRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getPeerAddressesRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getPeerAddressesRequest(v)
        }
      }()
      case 1012: try {
        var v: Protowire_GetSinkRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getSinkRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getSinkRequest(v)
        }
      }()
      case 1014: try {
        var v: Protowire_GetMempoolEntryRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getMempoolEntryRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getMempoolEntryRequest(v)
        }
      }()
      case 1016: try {
        var v: Protowire_GetConnectedPeerInfoRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getConnectedPeerInfoRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getConnectedPeerInfoRequest(v)
        }
      }()
      case 1018: try {
        var v: Protowire_AddPeerRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .addPeerRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .addPeerRequest(v)
        }
      }()
      case 1020: try {
        var v: Protowire_SubmitTransactionRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .submitTransactionRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .submitTransactionRequest(v)
        }
      }()
      case 1022: try {
        var v: Protowire_NotifyVirtualChainChangedRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .notifyVirtualChainChangedRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .notifyVirtualChainChangedRequest(v)
        }
      }()
      case 1025: try {
        var v: Protowire_GetBlockRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getBlockRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getBlockRequest(v)
        }
      }()
      case 1027: try {
        var v: Protowire_GetSubnetworkRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getSubnetworkRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getSubnetworkRequest(v)
        }
      }()
      case 1029: try {
        var v: Protowire_GetVirtualChainFromBlockRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getVirtualChainFromBlockRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getVirtualChainFromBlockRequest(v)
        }
      }()
      case 1031: try {
        var v: Protowire_GetBlocksRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getBlocksRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getBlocksRequest(v)
        }
      }()
      case 1033: try {
        var v: Protowire_GetBlockCountRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getBlockCountRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getBlockCountRequest(v)
        }
      }()
      case 1035: try {
        var v: Protowire_GetBlockDagInfoRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getBlockDagInfoRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getBlockDagInfoRequest(v)
        }
      }()
      case 1037: try {
        var v: Protowire_ResolveFinalityConflictRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .resolveFinalityConflictRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .resolveFinalityConflictRequest(v)
        }
      }()
      case 1039: try {
        var v: Protowire_NotifyFinalityConflictRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .notifyFinalityConflictRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .notifyFinalityConflictRequest(v)
        }
      }()
      case 1043: try {
        var v: Protowire_GetMempoolEntriesRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getMempoolEntriesRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getMempoolEntriesRequest(v)
        }
      }()
      case 1045: try {
        var v: Protowire_ShutdownRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .shutdownRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .shutdownRequest(v)
        }
      }()
      case 1047: try {
        var v: Protowire_GetHeadersRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getHeadersRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getHeadersRequest(v)
        }
      }()
      case 1049: try {
        var v: Protowire_NotifyUtxosChangedRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .notifyUtxosChangedRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .notifyUtxosChangedRequest(v)
        }
      }()
      case 1052: try {
        var v: Protowire_GetUtxosByAddressesRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getUtxosByAddressesRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getUtxosByAddressesRequest(v)
        }
      }()
      case 1054: try {
        var v: Protowire_GetSinkBlueScoreRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getSinkBlueScoreRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getSinkBlueScoreRequest(v)
        }
      }()
      case 1056: try {
        var v: Protowire_NotifySinkBlueScoreChangedRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .notifySinkBlueScoreChangedRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .notifySinkBlueScoreChangedRequest(v)
        }
      }()
      case 1059: try {
        var v: Protowire_BanRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .banRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .banRequest(v)
        }
      }()
      case 1061: try {
        var v: Protowire_UnbanRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .unbanRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .unbanRequest(v)
        }
      }()
      case 1063: try {
        var v: Protowire_GetInfoRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getInfoRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getInfoRequest(v)
        }
      }()
      case 1065: try {
        var v: Protowire_StopNotifyingUtxosChangedRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .stopNotifyingUtxosChangedRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .stopNotifyingUtxosChangedRequest(v)
        }
      }()
      case 1067: try {
        var v: Protowire_NotifyPruningPointUtxoSetOverrideRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .notifyPruningPointUtxoSetOverrideRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .notifyPruningPointUtxoSetOverrideRequest(v)
        }
      }()
      case 1070: try {
        var v: Protowire_StopNotifyingPruningPointUtxoSetOverrideRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .stopNotifyingPruningPointUtxoSetOverrideRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .stopNotifyingPruningPointUtxoSetOverrideRequest(v)
        }
      }()
      case 1072: try {
        var v: Protowire_EstimateNetworkHashesPerSecondRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .estimateNetworkHashesPerSecondRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .estimateNetworkHashesPerSecondRequest(v)
        }
      }()
      case 1074: try {
        var v: Protowire_NotifyVirtualDaaScoreChangedRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .notifyVirtualDaaScoreChangedRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .notifyVirtualDaaScoreChangedRequest(v)
        }
      }()
      case 1077: try {
        var v: Protowire_GetBalanceByAddressRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getBalanceByAddressRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getBalanceByAddressRequest(v)
        }
      }()
      case 1079: try {
        var v: Protowire_GetBalancesByAddressesRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getBalancesByAddressesRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getBalancesByAddressesRequest(v)
        }
      }()
      case 1081: try {
        var v: Protowire_NotifyNewBlockTemplateRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .notifyNewBlockTemplateRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .notifyNewBlockTemplateRequest(v)
        }
      }()
      case 1084: try {
        var v: Protowire_GetMempoolEntriesByAddressesRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getMempoolEntriesByAddressesRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getMempoolEntriesByAddressesRequest(v)
        }
      }()
      case 1086: try {
        var v: Protowire_GetCoinSupplyRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getCoinSupplyRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getCoinSupplyRequest(v)
        }
      }()
      case 1088: try {
        var v: Protowire_PingRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .pingRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .pingRequest(v)
        }
      }()
      case 1090: try {
        var v: Protowire_GetMetricsRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getMetricsRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getMetricsRequest(v)
        }
      }()
      case 1092: try {
        var v: Protowire_GetServerInfoRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getServerInfoRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getServerInfoRequest(v)
        }
      }()
      case 1094: try {
        var v: Protowire_GetSyncStatusRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getSyncStatusRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getSyncStatusRequest(v)
        }
      }()
      case 1096: try {
        var v: Protowire_GetDaaScoreTimestampEstimateRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getDaaScoreTimestampEstimateRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getDaaScoreTimestampEstimateRequest(v)
        }
      }()
      case 1100: try {
        var v: Protowire_SubmitTransactionReplacementRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .submitTransactionReplacementRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .submitTransactionReplacementRequest(v)
        }
      }()
      case 1102: try {
        var v: Protowire_GetConnectionsRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getConnectionsRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getConnectionsRequest(v)
        }
      }()
      case 1104: try {
        var v: Protowire_GetSystemInfoRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getSystemInfoRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getSystemInfoRequest(v)
        }
      }()
      case 1106: try {
        var v: Protowire_GetFeeEstimateRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getFeeEstimateRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getFeeEstimateRequest(v)
        }
      }()
      case 1108: try {
        var v: Protowire_GetFeeEstimateExperimentalRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getFeeEstimateExperimentalRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getFeeEstimateExperimentalRequest(v)
        }
      }()
      case 1110: try {
        var v: Protowire_GetCurrentBlockColorRequestMessage?
        var hadOneofValue = false
        if let current = self.payload {
          hadOneofValue = true
          if case .getCurrentBlockColorRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.payload = .getCurrentBlockColorRequest(v)
        }
      }()
      default: break
      }
    }
  }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 101)
    }
    switch self.payload {
    case .getCurrentNetworkRequest?: try {
      guard case .getCurrentNetworkRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1001)
    }()
    case .submitBlockRequest?: try {
      guard case .submitBlockRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1003)
    }()
    case .getBlockTemplateRequest?: try {
      guard case .getBlockTemplateRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1005)
    }()
    case .notifyBlockAddedRequest?: try {
      guard case .notifyBlockAddedRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1007)
    }()
    case .getPeerAddressesRequest?: try {
      guard case .getPeerAddressesRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1010)
    }()
    case .getSinkRequest?: try {
      guard case .getSinkRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1012)
    }()
    case .getMempoolEntryRequest?: try {
      guard case .getMempoolEntryRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1014)
    }()
    case .getConnectedPeerInfoRequest?: try {
      guard case .getConnectedPeerInfoRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1016)
    }()
    case .addPeerRequest?: try {
      guard case .addPeerRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1018)
    }()
    case .submitTransactionRequest?: try {
      guard case .submitTransactionRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1020)
    }()
    case .notifyVirtualChainChangedRequest?: try {
      guard case .notifyVirtualChainChangedRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1022)
    }()
    case .getBlockRequest?: try {
      guard case .getBlockRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1025)
    }()
    case .getSubnetworkRequest?: try {
      guard case .getSubnetworkRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1027)
    }()
    case .getVirtualChainFromBlockRequest?: try {
      guard case .getVirtualChainFromBlockRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1029)
    }()
    case .getBlocksRequest?: try {
      guard case .getBlocksRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1031)
    }()
    case .getBlockCountRequest?: try {
      guard case .getBlockCountRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1033)
    }()
    case .getBlockDagInfoRequest?: try {
      guard case .getBlockDagInfoRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1035)
    }()
    case .resolveFinalityConflictRequest?: try {
      guard case .resolveFinalityConflictRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1037)
    }()
    case .notifyFinalityConflictRequest?: try {
      guard case .notifyFinalityConflictRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1039)
    }()
    case .getMempoolEntriesRequest?: try {
      guard case .getMempoolEntriesRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1043)
    }()
    case .shutdownRequest?: try {
      guard case .shutdownRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1045)
    }()
    case .getHeadersRequest?: try {
      guard case .getHeadersRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1047)
    }()
    case .notifyUtxosChangedRequest?: try {
      guard case .notifyUtxosChangedRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1049)
    }()
    case .getUtxosByAddressesRequest?: try {
      guard case .getUtxosByAddressesRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1052)
    }()
    case .getSinkBlueScoreRequest?: try {
      guard case .getSinkBlueScoreRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1054)
    }()
    case .notifySinkBlueScoreChangedRequest?: try {
      guard case .notifySinkBlueScoreChangedRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1056)
    }()
    case .banRequest?: try {
      guard case .banRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1059)
    }()
    case .unbanRequest?: try {
      guard case .unbanRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1061)
    }()
    case .getInfoRequest?: try {
      guard case .getInfoRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1063)
    }()
    case .stopNotifyingUtxosChangedRequest?: try {
      guard case .stopNotifyingUtxosChangedRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1065)
    }()
    case .notifyPruningPointUtxoSetOverrideRequest?: try {
      guard case .notifyPruningPointUtxoSetOverrideRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1067)
    }()
    case .stopNotifyingPruningPointUtxoSetOverrideRequest?: try {
      guard case .stopNotifyingPruningPointUtxoSetOverrideRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1070)
    }()
    case .estimateNetworkHashesPerSecondRequest?: try {
      guard case .estimateNetworkHashesPerSecondRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1072)
    }()
    case .notifyVirtualDaaScoreChangedRequest?: try {
      guard case .notifyVirtualDaaScoreChangedRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1074)
    }()
    case .getBalanceByAddressRequest?: try {
      guard case .getBalanceByAddressRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1077)
    }()
    case .getBalancesByAddressesRequest?: try {
      guard case .getBalancesByAddressesRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1079)
    }()
    case .notifyNewBlockTemplateRequest?: try {
      guard case .notifyNewBlockTemplateRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1081)
    }()
    case .getMempoolEntriesByAddressesRequest?: try {
      guard case .getMempoolEntriesByAddressesRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1084)
    }()
    case .getCoinSupplyRequest?: try {
      guard case .getCoinSupplyRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1086)
    }()
    case .pingRequest?: try {
      guard case .pingRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1088)
    }()
    case .getMetricsRequest?: try {
      guard case .getMetricsRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1090)
    }()
    case .getServerInfoRequest?: try {
      guard case .getServerInfoRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1092)
    }()
    case .getSyncStatusRequest?: try {
      guard case .getSyncStatusRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1094)
    }()
    case .getDaaScoreTimestampEstimateRequest?: try {
      guard case .getDaaScoreTimestampEstimateRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1096)
    }()
    case .submitTransactionReplacementRequest?: try {
      guard case .submitTransactionReplacementRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1100)
    }()
    case .getConnectionsRequest?: try {
      guard case .getConnectionsRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1102)
    }()
    case .getSystemInfoRequest?: try {
      guard case .getSystemInfoRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1104)
    }()
    case .getFeeEstimateRequest?: try {
      guard case .getFeeEstimateRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1106)
    }()
    case .getFeeEstimateExperimentalRequest?: try {
      guard case .getFeeEstimateExperimentalRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1108)
    }()
    case .getCurrentBlockColorRequest?: try {
      guard case .getCurrentBlockColorRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1110)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

    public static func ==(lhs: Protowire_KaspadRequest, rhs: Protowire_KaspadRequest) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Protowire_KaspadResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".KaspadResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    101: .same(proto: "id"),
    1002: .same(proto: "getCurrentNetworkResponse"),
    1004: .same(proto: "submitBlockResponse"),
    1006: .same(proto: "getBlockTemplateResponse"),
    1008: .same(proto: "notifyBlockAddedResponse"),
    1009: .same(proto: "blockAddedNotification"),
    1011: .same(proto: "getPeerAddressesResponse"),
    1013: .same(proto: "GetSinkResponse"),
    1015: .same(proto: "getMempoolEntryResponse"),
    1017: .same(proto: "getConnectedPeerInfoResponse"),
    1019: .same(proto: "addPeerResponse"),
    1021: .same(proto: "submitTransactionResponse"),
    1023: .same(proto: "notifyVirtualChainChangedResponse"),
    1024: .same(proto: "virtualChainChangedNotification"),
    1026: .same(proto: "getBlockResponse"),
    1028: .same(proto: "getSubnetworkResponse"),
    1030: .same(proto: "getVirtualChainFromBlockResponse"),
    1032: .same(proto: "getBlocksResponse"),
    1034: .same(proto: "getBlockCountResponse"),
    1036: .same(proto: "getBlockDagInfoResponse"),
    1038: .same(proto: "resolveFinalityConflictResponse"),
    1040: .same(proto: "notifyFinalityConflictResponse"),
    1041: .same(proto: "finalityConflictNotification"),
    1042: .same(proto: "finalityConflictResolvedNotification"),
    1044: .same(proto: "getMempoolEntriesResponse"),
    1046: .same(proto: "shutdownResponse"),
    1048: .same(proto: "getHeadersResponse"),
    1050: .same(proto: "notifyUtxosChangedResponse"),
    1051: .same(proto: "utxosChangedNotification"),
    1053: .same(proto: "getUtxosByAddressesResponse"),
    1055: .same(proto: "getSinkBlueScoreResponse"),
    1057: .same(proto: "notifySinkBlueScoreChangedResponse"),
    1058: .same(proto: "sinkBlueScoreChangedNotification"),
    1060: .same(proto: "banResponse"),
    1062: .same(proto: "unbanResponse"),
    1064: .same(proto: "getInfoResponse"),
    1066: .same(proto: "stopNotifyingUtxosChangedResponse"),
    1068: .same(proto: "notifyPruningPointUtxoSetOverrideResponse"),
    1069: .same(proto: "pruningPointUtxoSetOverrideNotification"),
    1071: .same(proto: "stopNotifyingPruningPointUtxoSetOverrideResponse"),
    1073: .same(proto: "estimateNetworkHashesPerSecondResponse"),
    1075: .same(proto: "notifyVirtualDaaScoreChangedResponse"),
    1076: .same(proto: "virtualDaaScoreChangedNotification"),
    1078: .same(proto: "getBalanceByAddressResponse"),
    1080: .same(proto: "getBalancesByAddressesResponse"),
    1082: .same(proto: "notifyNewBlockTemplateResponse"),
    1083: .same(proto: "newBlockTemplateNotification"),
    1085: .same(proto: "getMempoolEntriesByAddressesResponse"),
    1087: .same(proto: "getCoinSupplyResponse"),
    1089: .same(proto: "pingResponse"),
    1091: .same(proto: "getMetricsResponse"),
    1093: .same(proto: "getServerInfoResponse"),
    1095: .same(proto: "getSyncStatusResponse"),
    1097: .same(proto: "getDaaScoreTimestampEstimateResponse"),
    1101: .same(proto: "submitTransactionReplacementResponse"),
    1103: .same(proto: "getConnectionsResponse"),
    1105: .same(proto: "getSystemInfoResponse"),
    1107: .same(proto: "getFeeEstimateResponse"),
    1109: .same(proto: "getFeeEstimateExperimentalResponse"),
    1111: .same(proto: "getCurrentBlockColorResponse"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _payload: Protowire_KaspadResponse.OneOf_Payload?

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _payload = source._payload
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

    mutating public func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 101: try { try decoder.decodeSingularUInt64Field(value: &_storage._id) }()
        case 1002: try {
          var v: Protowire_GetCurrentNetworkResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getCurrentNetworkResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getCurrentNetworkResponse(v)
          }
        }()
        case 1004: try {
          var v: Protowire_SubmitBlockResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .submitBlockResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .submitBlockResponse(v)
          }
        }()
        case 1006: try {
          var v: Protowire_GetBlockTemplateResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getBlockTemplateResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getBlockTemplateResponse(v)
          }
        }()
        case 1008: try {
          var v: Protowire_NotifyBlockAddedResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .notifyBlockAddedResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .notifyBlockAddedResponse(v)
          }
        }()
        case 1009: try {
          var v: Protowire_BlockAddedNotificationMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .blockAddedNotification(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .blockAddedNotification(v)
          }
        }()
        case 1011: try {
          var v: Protowire_GetPeerAddressesResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getPeerAddressesResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getPeerAddressesResponse(v)
          }
        }()
        case 1013: try {
          var v: Protowire_GetSinkResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getSinkResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getSinkResponse(v)
          }
        }()
        case 1015: try {
          var v: Protowire_GetMempoolEntryResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getMempoolEntryResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getMempoolEntryResponse(v)
          }
        }()
        case 1017: try {
          var v: Protowire_GetConnectedPeerInfoResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getConnectedPeerInfoResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getConnectedPeerInfoResponse(v)
          }
        }()
        case 1019: try {
          var v: Protowire_AddPeerResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .addPeerResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .addPeerResponse(v)
          }
        }()
        case 1021: try {
          var v: Protowire_SubmitTransactionResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .submitTransactionResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .submitTransactionResponse(v)
          }
        }()
        case 1023: try {
          var v: Protowire_NotifyVirtualChainChangedResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .notifyVirtualChainChangedResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .notifyVirtualChainChangedResponse(v)
          }
        }()
        case 1024: try {
          var v: Protowire_VirtualChainChangedNotificationMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .virtualChainChangedNotification(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .virtualChainChangedNotification(v)
          }
        }()
        case 1026: try {
          var v: Protowire_GetBlockResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getBlockResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getBlockResponse(v)
          }
        }()
        case 1028: try {
          var v: Protowire_GetSubnetworkResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getSubnetworkResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getSubnetworkResponse(v)
          }
        }()
        case 1030: try {
          var v: Protowire_GetVirtualChainFromBlockResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getVirtualChainFromBlockResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getVirtualChainFromBlockResponse(v)
          }
        }()
        case 1032: try {
          var v: Protowire_GetBlocksResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getBlocksResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getBlocksResponse(v)
          }
        }()
        case 1034: try {
          var v: Protowire_GetBlockCountResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getBlockCountResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getBlockCountResponse(v)
          }
        }()
        case 1036: try {
          var v: Protowire_GetBlockDagInfoResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getBlockDagInfoResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getBlockDagInfoResponse(v)
          }
        }()
        case 1038: try {
          var v: Protowire_ResolveFinalityConflictResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .resolveFinalityConflictResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .resolveFinalityConflictResponse(v)
          }
        }()
        case 1040: try {
          var v: Protowire_NotifyFinalityConflictResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .notifyFinalityConflictResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .notifyFinalityConflictResponse(v)
          }
        }()
        case 1041: try {
          var v: Protowire_FinalityConflictNotificationMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .finalityConflictNotification(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .finalityConflictNotification(v)
          }
        }()
        case 1042: try {
          var v: Protowire_FinalityConflictResolvedNotificationMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .finalityConflictResolvedNotification(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .finalityConflictResolvedNotification(v)
          }
        }()
        case 1044: try {
          var v: Protowire_GetMempoolEntriesResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getMempoolEntriesResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getMempoolEntriesResponse(v)
          }
        }()
        case 1046: try {
          var v: Protowire_ShutdownResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .shutdownResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .shutdownResponse(v)
          }
        }()
        case 1048: try {
          var v: Protowire_GetHeadersResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getHeadersResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getHeadersResponse(v)
          }
        }()
        case 1050: try {
          var v: Protowire_NotifyUtxosChangedResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .notifyUtxosChangedResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .notifyUtxosChangedResponse(v)
          }
        }()
        case 1051: try {
          var v: Protowire_UtxosChangedNotificationMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .utxosChangedNotification(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .utxosChangedNotification(v)
          }
        }()
        case 1053: try {
          var v: Protowire_GetUtxosByAddressesResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getUtxosByAddressesResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getUtxosByAddressesResponse(v)
          }
        }()
        case 1055: try {
          var v: Protowire_GetSinkBlueScoreResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getSinkBlueScoreResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getSinkBlueScoreResponse(v)
          }
        }()
        case 1057: try {
          var v: Protowire_NotifySinkBlueScoreChangedResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .notifySinkBlueScoreChangedResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .notifySinkBlueScoreChangedResponse(v)
          }
        }()
        case 1058: try {
          var v: Protowire_SinkBlueScoreChangedNotificationMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .sinkBlueScoreChangedNotification(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .sinkBlueScoreChangedNotification(v)
          }
        }()
        case 1060: try {
          var v: Protowire_BanResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .banResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .banResponse(v)
          }
        }()
        case 1062: try {
          var v: Protowire_UnbanResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .unbanResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .unbanResponse(v)
          }
        }()
        case 1064: try {
          var v: Protowire_GetInfoResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getInfoResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getInfoResponse(v)
          }
        }()
        case 1066: try {
          var v: Protowire_StopNotifyingUtxosChangedResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .stopNotifyingUtxosChangedResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .stopNotifyingUtxosChangedResponse(v)
          }
        }()
        case 1068: try {
          var v: Protowire_NotifyPruningPointUtxoSetOverrideResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .notifyPruningPointUtxoSetOverrideResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .notifyPruningPointUtxoSetOverrideResponse(v)
          }
        }()
        case 1069: try {
          var v: Protowire_PruningPointUtxoSetOverrideNotificationMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .pruningPointUtxoSetOverrideNotification(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .pruningPointUtxoSetOverrideNotification(v)
          }
        }()
        case 1071: try {
          var v: Protowire_StopNotifyingPruningPointUtxoSetOverrideResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .stopNotifyingPruningPointUtxoSetOverrideResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .stopNotifyingPruningPointUtxoSetOverrideResponse(v)
          }
        }()
        case 1073: try {
          var v: Protowire_EstimateNetworkHashesPerSecondResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .estimateNetworkHashesPerSecondResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .estimateNetworkHashesPerSecondResponse(v)
          }
        }()
        case 1075: try {
          var v: Protowire_NotifyVirtualDaaScoreChangedResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .notifyVirtualDaaScoreChangedResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .notifyVirtualDaaScoreChangedResponse(v)
          }
        }()
        case 1076: try {
          var v: Protowire_VirtualDaaScoreChangedNotificationMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .virtualDaaScoreChangedNotification(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .virtualDaaScoreChangedNotification(v)
          }
        }()
        case 1078: try {
          var v: Protowire_GetBalanceByAddressResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getBalanceByAddressResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getBalanceByAddressResponse(v)
          }
        }()
        case 1080: try {
          var v: Protowire_GetBalancesByAddressesResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getBalancesByAddressesResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getBalancesByAddressesResponse(v)
          }
        }()
        case 1082: try {
          var v: Protowire_NotifyNewBlockTemplateResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .notifyNewBlockTemplateResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .notifyNewBlockTemplateResponse(v)
          }
        }()
        case 1083: try {
          var v: Protowire_NewBlockTemplateNotificationMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .newBlockTemplateNotification(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .newBlockTemplateNotification(v)
          }
        }()
        case 1085: try {
          var v: Protowire_GetMempoolEntriesByAddressesResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getMempoolEntriesByAddressesResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getMempoolEntriesByAddressesResponse(v)
          }
        }()
        case 1087: try {
          var v: Protowire_GetCoinSupplyResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getCoinSupplyResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getCoinSupplyResponse(v)
          }
        }()
        case 1089: try {
          var v: Protowire_PingResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .pingResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .pingResponse(v)
          }
        }()
        case 1091: try {
          var v: Protowire_GetMetricsResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getMetricsResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getMetricsResponse(v)
          }
        }()
        case 1093: try {
          var v: Protowire_GetServerInfoResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getServerInfoResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getServerInfoResponse(v)
          }
        }()
        case 1095: try {
          var v: Protowire_GetSyncStatusResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getSyncStatusResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getSyncStatusResponse(v)
          }
        }()
        case 1097: try {
          var v: Protowire_GetDaaScoreTimestampEstimateResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getDaaScoreTimestampEstimateResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getDaaScoreTimestampEstimateResponse(v)
          }
        }()
        case 1101: try {
          var v: Protowire_SubmitTransactionReplacementResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .submitTransactionReplacementResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .submitTransactionReplacementResponse(v)
          }
        }()
        case 1103: try {
          var v: Protowire_GetConnectionsResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getConnectionsResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getConnectionsResponse(v)
          }
        }()
        case 1105: try {
          var v: Protowire_GetSystemInfoResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getSystemInfoResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getSystemInfoResponse(v)
          }
        }()
        case 1107: try {
          var v: Protowire_GetFeeEstimateResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getFeeEstimateResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getFeeEstimateResponse(v)
          }
        }()
        case 1109: try {
          var v: Protowire_GetFeeEstimateExperimentalResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getFeeEstimateExperimentalResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getFeeEstimateExperimentalResponse(v)
          }
        }()
        case 1111: try {
          var v: Protowire_GetCurrentBlockColorResponseMessage?
          var hadOneofValue = false
          if let current = _storage._payload {
            hadOneofValue = true
            if case .getCurrentBlockColorResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._payload = .getCurrentBlockColorResponse(v)
          }
        }()
        default: break
        }
      }
    }
  }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 101)
      }
      switch _storage._payload {
      case .getCurrentNetworkResponse?: try {
        guard case .getCurrentNetworkResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1002)
      }()
      case .submitBlockResponse?: try {
        guard case .submitBlockResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1004)
      }()
      case .getBlockTemplateResponse?: try {
        guard case .getBlockTemplateResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1006)
      }()
      case .notifyBlockAddedResponse?: try {
        guard case .notifyBlockAddedResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1008)
      }()
      case .blockAddedNotification?: try {
        guard case .blockAddedNotification(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1009)
      }()
      case .getPeerAddressesResponse?: try {
        guard case .getPeerAddressesResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1011)
      }()
      case .getSinkResponse?: try {
        guard case .getSinkResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1013)
      }()
      case .getMempoolEntryResponse?: try {
        guard case .getMempoolEntryResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1015)
      }()
      case .getConnectedPeerInfoResponse?: try {
        guard case .getConnectedPeerInfoResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1017)
      }()
      case .addPeerResponse?: try {
        guard case .addPeerResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1019)
      }()
      case .submitTransactionResponse?: try {
        guard case .submitTransactionResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1021)
      }()
      case .notifyVirtualChainChangedResponse?: try {
        guard case .notifyVirtualChainChangedResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1023)
      }()
      case .virtualChainChangedNotification?: try {
        guard case .virtualChainChangedNotification(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1024)
      }()
      case .getBlockResponse?: try {
        guard case .getBlockResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1026)
      }()
      case .getSubnetworkResponse?: try {
        guard case .getSubnetworkResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1028)
      }()
      case .getVirtualChainFromBlockResponse?: try {
        guard case .getVirtualChainFromBlockResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1030)
      }()
      case .getBlocksResponse?: try {
        guard case .getBlocksResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1032)
      }()
      case .getBlockCountResponse?: try {
        guard case .getBlockCountResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1034)
      }()
      case .getBlockDagInfoResponse?: try {
        guard case .getBlockDagInfoResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1036)
      }()
      case .resolveFinalityConflictResponse?: try {
        guard case .resolveFinalityConflictResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1038)
      }()
      case .notifyFinalityConflictResponse?: try {
        guard case .notifyFinalityConflictResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1040)
      }()
      case .finalityConflictNotification?: try {
        guard case .finalityConflictNotification(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1041)
      }()
      case .finalityConflictResolvedNotification?: try {
        guard case .finalityConflictResolvedNotification(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1042)
      }()
      case .getMempoolEntriesResponse?: try {
        guard case .getMempoolEntriesResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1044)
      }()
      case .shutdownResponse?: try {
        guard case .shutdownResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1046)
      }()
      case .getHeadersResponse?: try {
        guard case .getHeadersResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1048)
      }()
      case .notifyUtxosChangedResponse?: try {
        guard case .notifyUtxosChangedResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1050)
      }()
      case .utxosChangedNotification?: try {
        guard case .utxosChangedNotification(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1051)
      }()
      case .getUtxosByAddressesResponse?: try {
        guard case .getUtxosByAddressesResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1053)
      }()
      case .getSinkBlueScoreResponse?: try {
        guard case .getSinkBlueScoreResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1055)
      }()
      case .notifySinkBlueScoreChangedResponse?: try {
        guard case .notifySinkBlueScoreChangedResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1057)
      }()
      case .sinkBlueScoreChangedNotification?: try {
        guard case .sinkBlueScoreChangedNotification(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1058)
      }()
      case .banResponse?: try {
        guard case .banResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1060)
      }()
      case .unbanResponse?: try {
        guard case .unbanResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1062)
      }()
      case .getInfoResponse?: try {
        guard case .getInfoResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1064)
      }()
      case .stopNotifyingUtxosChangedResponse?: try {
        guard case .stopNotifyingUtxosChangedResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1066)
      }()
      case .notifyPruningPointUtxoSetOverrideResponse?: try {
        guard case .notifyPruningPointUtxoSetOverrideResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1068)
      }()
      case .pruningPointUtxoSetOverrideNotification?: try {
        guard case .pruningPointUtxoSetOverrideNotification(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1069)
      }()
      case .stopNotifyingPruningPointUtxoSetOverrideResponse?: try {
        guard case .stopNotifyingPruningPointUtxoSetOverrideResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1071)
      }()
      case .estimateNetworkHashesPerSecondResponse?: try {
        guard case .estimateNetworkHashesPerSecondResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1073)
      }()
      case .notifyVirtualDaaScoreChangedResponse?: try {
        guard case .notifyVirtualDaaScoreChangedResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1075)
      }()
      case .virtualDaaScoreChangedNotification?: try {
        guard case .virtualDaaScoreChangedNotification(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1076)
      }()
      case .getBalanceByAddressResponse?: try {
        guard case .getBalanceByAddressResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1078)
      }()
      case .getBalancesByAddressesResponse?: try {
        guard case .getBalancesByAddressesResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1080)
      }()
      case .notifyNewBlockTemplateResponse?: try {
        guard case .notifyNewBlockTemplateResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1082)
      }()
      case .newBlockTemplateNotification?: try {
        guard case .newBlockTemplateNotification(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1083)
      }()
      case .getMempoolEntriesByAddressesResponse?: try {
        guard case .getMempoolEntriesByAddressesResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1085)
      }()
      case .getCoinSupplyResponse?: try {
        guard case .getCoinSupplyResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1087)
      }()
      case .pingResponse?: try {
        guard case .pingResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1089)
      }()
      case .getMetricsResponse?: try {
        guard case .getMetricsResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1091)
      }()
      case .getServerInfoResponse?: try {
        guard case .getServerInfoResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1093)
      }()
      case .getSyncStatusResponse?: try {
        guard case .getSyncStatusResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1095)
      }()
      case .getDaaScoreTimestampEstimateResponse?: try {
        guard case .getDaaScoreTimestampEstimateResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1097)
      }()
      case .submitTransactionReplacementResponse?: try {
        guard case .submitTransactionReplacementResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1101)
      }()
      case .getConnectionsResponse?: try {
        guard case .getConnectionsResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1103)
      }()
      case .getSystemInfoResponse?: try {
        guard case .getSystemInfoResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1105)
      }()
      case .getFeeEstimateResponse?: try {
        guard case .getFeeEstimateResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1107)
      }()
      case .getFeeEstimateExperimentalResponse?: try {
        guard case .getFeeEstimateExperimentalResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1109)
      }()
      case .getCurrentBlockColorResponse?: try {
        guard case .getCurrentBlockColorResponse(let v)? = _storage._payload else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1111)
      }()
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

    public static func ==(lhs: Protowire_KaspadResponse, rhs: Protowire_KaspadResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._payload != rhs_storage._payload {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
